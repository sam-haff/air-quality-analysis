id: ingest_air_quality_measurements_from_openaq_s3
namespace: company.team

concurrency:
  limit: 1

inputs:
  - id: countries
    type: ARRAY
    itemType: STRING
    defaults: ["Poland"]
  - id: from_year
    type: INT
    defaults: 2024
  - id: from_month
    type: INT
    defaults: 1
  - id: to_year
    type: INT
    defaults: 2025
  - id: to_month
    type: INT
    defaults: 3

variables:
  years_list: "{{ range(inputs.from_year, inputs.to_year)}}"

pluginDefaults:
  - type: io.kestra.plugin.gcp
    values:
      serviceAccount: "{{kv('GCP_CREDS')}}"
      projectId: "{{kv('GCP_PROJECT')}}"
      location: "{{kv('GCP_LOC')}}"
      bucket: "{{kv('GCP_BUCKET')}}"

tasks:
  - id: set_labels
    type: io.kestra.plugin.core.execution.Labels
    labels:
      countries: "{{ inputs.countries | join(', ') }}"
      from: "{{ inputs.from_year }}-{{ inputs.from_month }}"
      to: "{{ inputs.to_year }}-{{inputs.to_month}}"
  - id: sync
    type: io.kestra.plugin.git.SyncNamespaceFiles
    url: "{{ kv('GIT_REPO_URL') }}"
    namespace: "{{ flow.namespace }}"
    gitDirectory: "pipeline/aq_measurements_from_s3_lake_ingest"
  

  - id: for_each_country
    type: io.kestra.plugin.core.flow.ForEach
    values: "{{inputs.countries}}"
    tasks:
      - id: ingest_to_gcs
        type: io.kestra.plugin.scripts.python.Commands
        runIf: "true"
        namespaceFiles:
          enabled: true
        taskRunner:
          type: io.kestra.plugin.core.runner.Process
        env:
          AQ_DATA_BUCKET_URL: "{{ kv('AQ_DATA_BUCKET_URL') }}"
          AQ_COUNTRY_NAME: "{{ taskrun.value }}"
          AQ_FROM_YEAR: "{{ inputs.from_year }}"
          AQ_FROM_MO: "{{ inputs.from_month }}"
          AQ_TO_YEAR: "{{ inputs.to_year }}"
          AQ_TO_MO: "{{ inputs.to_month }}"

          AWS_ACCESS_KEY_ID: "{{ kv('AWS_KEY') }}"
          AWS_SECRET_ACCESS_KEY: "{{ kv('AWS_SECRET') }}"
        beforeCommands:
          - pip install -r requirements.txt
        commands:
          - python ingest_v3.py
      - id: for_each_year
        type: io.kestra.plugin.core.flow.ForEach
        values: "{{ render(vars.years_list) }}"
        tasks:
          - id: create_ext_table
            type: "io.kestra.plugin.gcp.bigquery.Query"
            sql: |
              CREATE OR REPLACE EXTERNAL TABLE `{{kv('GCP_PROJECT')}}.bq_dataset.tmp_ext`(
                location_id INT64,
                sensors_id INT64,
                location STRING,
                datetime STRING,
                lat FLOAT64,
                lon FLOAT64,
                parameter STRING,
                units STRING,
                value FLOAT64
              ) OPTIONS(format="PARQUET", uris=["{{ kv('AQ_DATA_BUCKET_URL') }}aq/raw/measurements/{{ parents[0].taskrun.value | lower }}/{{ taskrun.value }}/*.parquet"])
          - id: create_target_resident_table
            type: "io.kestra.plugin.gcp.bigquery.Query"
            sql: |
              CREATE IF NOT EXISTS TABLE `{{kv('GCP_PROJECT')}}.bq_dataset.m_measurements`(
                location_id INT64,
                sensors_id INT64,
                location STRING,
                datetime DATETIME,
                lat FLOAT64,
                lon FLOAT64,
                parameter STRING,
                units STRING,
                value FLOAT64
              );
          - id: from_ext_to_resident_table
            type: "io.kestra.plugin.gcp.bigquery.Query"
            sql: |
              INSERT INTO `{{kv('GCP_PROJECT')}}.bq_dataset.m_measurements`(
                location_id,
                sensors_id,
                location,
                datetime,
                lat,
                lon,
                parameter,
                units,
                value
              )
              SELECT location_id,
                sensors_id,
                location,
                CAST(datetime AS DATETIME),
                lat,
                lon,
                parameter,
                units,
                value
              FROM `{{kv('GCP_PROJECT')}}.bq_dataset.tmp_ext`;              

        





  