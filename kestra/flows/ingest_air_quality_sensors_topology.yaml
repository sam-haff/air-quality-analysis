######
### Ingests all present(including already non-active) locations and sensors.
### The data required for measurements data enrichment
### and filtering the sensors and locations for which
### we want to ingest the measurements data.
###
### Requires following KV:
###    GIT repo url - url of the project repository
###    AQ_API_KEY - OpenAQ api key
###    AQ_DATA_BUCKET_URL - url of the bucket in the following form: "gs://bucket-name/"
###    GCP_CREDS - Google Cloud Platform service account json
###    GCP_PROJECT - Google Cloud project
###    GCP_LOC - Google Cloud project location(example: "US")
###    BQ_DATASET - bigquery dataset, that will contain tables with ingested data
######

id: ingest_air_quality_sensors_topology
namespace: company.team

pluginDefaults:
  - type: io.kestra.plugin.gcp
    values:
      serviceAccount: "{{kv('GCP_CREDS')}}"
      projectId: "{{kv('GCP_PROJECT')}}"
      location: "{{kv('GCP_LOC')}}"
      bucket: "{{kv('GCP_BUCKET')}}"
      
concurrency:
  limit: 1

variables:
  bq_topology_table: "{{kv('GCP_PROJECT')}}.{{kv('BQ_DATASET')}}.sensors_topology_locs"
  bq_ext_table: "{{kv('GCP_PROJECT')}}.{{kv('BQ_DATASET')}}.tmp_locs_ext"

tasks:
  - id: sync
    type: io.kestra.plugin.git.SyncNamespaceFiles
    url: "{{ kv('GIT_REPO_URL') }}"
    namespace: "{{ flow.namespace }}"
    gitDirectory: "pipeline/aq_topology_lake_ingest"

  - id: download_sensors_topology
    namespaceFiles:
      enabled: true
    type: io.kestra.plugin.scripts.python.Commands
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    env:
      AQ_DATA_BUCKET_URL: "{{ kv('AQ_DATA_BUCKET_URL') }}"
      DESTINATION__FILESYSTEM__BUCKET_URL: "{{ kv('AQ_DATA_BUCKET_URL') }}aq/raw/"
    beforeCommands:
      - pip install -r requirements.txt
    commands:
      - python aq_topology_ingest.py
  
  - id: create_tmp_external_table
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      CREATE OR REPLACE EXTERNAL TABLE `{{render(vars.bq_ext_table)}}`
      OPTIONS(format="PARQUET", uris=['{{ kv('AQ_DATA_BUCKET_URL') }}aq/raw/sensors_topology/locs/*.parquet']);
  - id: create_and_load_target_mat_topology_table
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      CREATE OR REPLACE TABLE `{{render(vars.bq_topology_table)}}`
      (
        id INT64,
        name STRING,
        timezone STRING,
        country_id INT64,
        country_code STRING,
        country_name STRING,
        owner_name STRING,
        provider_id INT64,
        provider_name STRING,
        lat FLOAT64,
        lon FLOAT64,
        datetime_first_utc DATETIME,
        datetime_last_utc DATETIME
      ) as 
      (SELECT id as id,
        name as name,
        timezone as timezone,
        country__id as country_id,
        country__code as country_code,
        country__name as country_name,
        owner__name as owner_name,
        provider__id as provider_id,
        provider__name as provider_name,
        coordinates__latitude as lat,
        coordinates__longitude as lon,
        CAST(datetime_first__utc as DATETIME) as datetime_first_utc,
        CAST(datetime_last__utc as DATETIME) as datetime_last_utc
      FROM `{{kv('GCP_PROJECT')}}.{{kv('BQ_DATASET')}}.tmp_locs_ext`
      );